declare module 'fs/promises' {
    import { Abortable } from 'node:events';
    import { Stream } from 'node:stream';
    import {
        Stats,
        BigIntStats,
        StatOptions,
        WriteVResult,
        ReadVResult,
        PathLike,
        RmDirOptions,
        RmOptions,
        MakeDirectoryOptions,
        Dirent,
        OpenDirOptions,
        Dir,
        ObjectEncodingOptions,
        BufferEncodingOption,
        OpenMode,
        Mode,
        WatchOptions,
        WatchEventType,
        CopyOptions,
        ReadStream,
        WriteStream,
    } from 'node:fs';
    interface FileChangeInfo<T extends string | Buffer> {
        eventType: WatchEventType;
        filename: T;
    }
    interface FlagAndOpenMode {
        mode?: Mode | undefined;
        flag?: OpenMode | undefined;
    }
    interface FileReadResult<T extends NodeJS.ArrayBufferView> {
        bytesRead: number;
        buffer: T;
    }
    interface FileReadOptions<T extends NodeJS.ArrayBufferView = Buffer> {
        buffer?: T;
        offset?: number | null;
        length?: number | null;
        position?: number | null;
    }
    interface CreateReadStreamOptions {
        encoding?: BufferEncoding | null | undefined;
        autoClose?: boolean | undefined;
        emitClose?: boolean | undefined;
        start?: number | undefined;
        end?: number | undefined;
        highWaterMark?: number | undefined;
    }
    interface CreateWriteStreamOptions {
        encoding?: BufferEncoding | null | undefined;
        autoClose?: boolean | undefined;
        emitClose?: boolean | undefined;
        start?: number | undefined;
    }
    interface FileHandle {
        readonly fd: number;
        appendFile(data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null): Promise<void>;
        chown(uid: number, gid: number): Promise<void>;
        chmod(mode: Mode): Promise<void>;
        createReadStream(options?: CreateReadStreamOptions): ReadStream;
        createWriteStream(options?: CreateWriteStreamOptions): WriteStream;
        datasync(): Promise<void>;
        sync(): Promise<void>;
        read<T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number | null, length?: number | null, position?: number | null): Promise<FileReadResult<T>>;
        read<T extends NodeJS.ArrayBufferView = Buffer>(options?: FileReadOptions<T>): Promise<FileReadResult<T>>;
        readFile(
            options?: {
                encoding?: null | undefined;
                flag?: OpenMode | undefined;
            } | null
        ): Promise<Buffer>;
        readFile(
            options:
                | {
                      encoding: BufferEncoding;
                      flag?: OpenMode | undefined;
                  }
                | BufferEncoding
        ): Promise<string>;
        readFile(
            options?:
                | (ObjectEncodingOptions & {
                      flag?: OpenMode | undefined;
                  })
                | BufferEncoding
                | null
        ): Promise<string | Buffer>;
        stat(
            opts?: StatOptions & {
                bigint?: false | undefined;
            }
        ): Promise<Stats>;
        stat(
            opts: StatOptions & {
                bigint: true;
            }
        ): Promise<BigIntStats>;
        stat(opts?: StatOptions): Promise<Stats | BigIntStats>;
        truncate(len?: number): Promise<void>;
        utimes(atime: string | number | Date, mtime: string | number | Date): Promise<void>;
        writeFile(data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode & Abortable) | BufferEncoding | null): Promise<void>;
        write<TBuffer extends Uint8Array>(
            buffer: TBuffer,
            offset?: number | null,
            length?: number | null,
            position?: number | null
        ): Promise<{
            bytesWritten: number;
            buffer: TBuffer;
        }>;
        write(
            data: string,
            position?: number | null,
            encoding?: BufferEncoding | null
        ): Promise<{
            bytesWritten: number;
            buffer: string;
        }>;
        writev(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<WriteVResult>;
        readv(buffers: ReadonlyArray<NodeJS.ArrayBufferView>, position?: number): Promise<ReadVResult>;
        close(): Promise<void>;
    }
    function access(path: PathLike, mode?: number): Promise<void>;
    function copyFile(src: PathLike, dest: PathLike, mode?: number): Promise<void>;
    function open(path: PathLike, flags: string | number, mode?: Mode): Promise<FileHandle>;
    function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;
    function truncate(path: PathLike, len?: number): Promise<void>;
    function rmdir(path: PathLike, options?: RmDirOptions): Promise<void>;
    function rm(path: PathLike, options?: RmOptions): Promise<void>;
    function mkdir(
        path: PathLike,
        options: MakeDirectoryOptions & {
            recursive: true;
        }
    ): Promise<string | undefined>;
    function mkdir(
        path: PathLike,
        options?:
            | Mode
            | (MakeDirectoryOptions & {
                  recursive?: false | undefined;
              })
            | null
    ): Promise<void>;
    function mkdir(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;
    function readdir(
        path: PathLike,
        options?:
            | (ObjectEncodingOptions & {
                  withFileTypes?: false | undefined;
              })
            | BufferEncoding
            | null
    ): Promise<string[]>;
    function readdir(
        path: PathLike,
        options:
            | {
                  encoding: 'buffer';
                  withFileTypes?: false | undefined;
              }
            | 'buffer'
    ): Promise<Buffer[]>;
    function readdir(
        path: PathLike,
        options?:
            | (ObjectEncodingOptions & {
                  withFileTypes?: false | undefined;
              })
            | BufferEncoding
            | null
    ): Promise<string[] | Buffer[]>;
    function readdir(
        path: PathLike,
        options: ObjectEncodingOptions & {
            withFileTypes: true;
        }
    ): Promise<Dirent[]>;
    function readlink(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;
    function readlink(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;
    function readlink(path: PathLike, options?: ObjectEncodingOptions | string | null): Promise<string | Buffer>;
    function symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;
    function lstat(
        path: PathLike,
        opts?: StatOptions & {
            bigint?: false | undefined;
        }
    ): Promise<Stats>;
    function lstat(
        path: PathLike,
        opts: StatOptions & {
            bigint: true;
        }
    ): Promise<BigIntStats>;
    function lstat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;
    function stat(
        path: PathLike,
        opts?: StatOptions & {
            bigint?: false | undefined;
        }
    ): Promise<Stats>;
    function stat(
        path: PathLike,
        opts: StatOptions & {
            bigint: true;
        }
    ): Promise<BigIntStats>;
    function stat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;
    function link(existingPath: PathLike, newPath: PathLike): Promise<void>;
    function unlink(path: PathLike): Promise<void>;
    function chmod(path: PathLike, mode: Mode): Promise<void>;
    function lchmod(path: PathLike, mode: Mode): Promise<void>;
    function lchown(path: PathLike, uid: number, gid: number): Promise<void>;
    function lutimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
    function chown(path: PathLike, uid: number, gid: number): Promise<void>;
    function utimes(path: PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void>;
    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;
    function realpath(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;
    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;
    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;
    function mkdtemp(prefix: string, options: BufferEncodingOption): Promise<Buffer>;
    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;
    function writeFile(
        file: PathLike | FileHandle,
        data: string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream,
        options?:
            | (ObjectEncodingOptions & {
                  mode?: Mode | undefined;
                  flag?: OpenMode | undefined;
              } & Abortable)
            | BufferEncoding
            | null
    ): Promise<void>;
    function appendFile(path: PathLike | FileHandle, data: string | Uint8Array, options?: (ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null): Promise<void>;
    function readFile(
        path: PathLike | FileHandle,
        options?:
            | ({
                  encoding?: null | undefined;
                  flag?: OpenMode | undefined;
              } & Abortable)
            | null
    ): Promise<Buffer>;
    function readFile(
        path: PathLike | FileHandle,
        options:
            | ({
                  encoding: BufferEncoding;
                  flag?: OpenMode | undefined;
              } & Abortable)
            | BufferEncoding
    ): Promise<string>;
    function readFile(
        path: PathLike | FileHandle,
        options?:
            | (ObjectEncodingOptions &
                  Abortable & {
                      flag?: OpenMode | undefined;
                  })
            | BufferEncoding
            | null
    ): Promise<string | Buffer>;
    function opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>;
    function watch(
        filename: PathLike,
        options:
            | (WatchOptions & {
                  encoding: 'buffer';
              })
            | 'buffer'
    ): AsyncIterable<FileChangeInfo<Buffer>>;
    function watch(filename: PathLike, options?: WatchOptions | BufferEncoding): AsyncIterable<FileChangeInfo<string>>;
    function watch(filename: PathLike, options: WatchOptions | string): AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>;
    function cp(source: string, destination: string, opts?: CopyOptions): Promise<void>;
}
declare module 'node:fs/promises' {
    export * from 'fs/promises';
}
